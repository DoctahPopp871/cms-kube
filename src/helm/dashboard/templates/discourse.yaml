apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.discourseImage.appName }}
  namespace: {{ .Values.app.namespace }}
  labels:
    app: {{ .Values.discourseImage.appName }}
spec:
  ports:
    - port: {{ .Values.app.network.webPort }}
      protocol: TCP
      targetPort: {{ .Values.app.network.webPort }}
  selector:
    app: {{ .Values.discourseImage.appName }}
  sessionAffinity: None
  type: NodePort

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.discourseImage.appName }}
  namespace: {{ .Values.app.namespace }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ .Values.discourseImage.appName }}
    spec:
      imagePullSecrets:
      - name: {{ .Values.secrets.mcdbHarborSecrets.mcdbCoreapps.credName }}
      containers:
      - name: {{ .Values.discourseImage.appName }}
        image: {{ .Values.discourseImage.repository }}:{{ .Values.discourseImage.tag }}
        command: ["/sbin/boot"]
        ports:
        - containerPort: {{ .Values.app.network.webPort }}
        - containerPort: {{ .Values.app.network.discourseMailPort }}
        #lifecycle:
        #  postStart:
        #    exec:
        #      command: ["/bin/sh", "-c", "/root/bootstrap.sh"]
        env:
        - name: DISCOURSE_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: discoursedbsecret
              key: dbUsername
        - name: DISCOURSE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: discoursedbsecret
              key: dbPassword
        - name: DISCOURSE_DB_HOST
          value: {{ .Values.dashApiImage.dbHost }}
        - name: DISCOURSE_DB_NAME
          value: {{ .Values.discourseSettings.dbName }}
        - name: DISCOURSE_REDIS_HOST
          value: {{ .Values.redisImage.appName }}
        - name: DISCOURSE_DEVELOPER_EMAILS
          value: {{ .Values.discourseSettings.developerEmails.email1 }}
        - name: DISCOURSE_HOSTNAME
          value: {{ .Values.discourseSettings.discourseHostname }}
        - name: DISCOURSE_RELATIVE_URL_ROOT
          value: {{ .Values.discourseSettings.discourseUrl }}
        - name: ENABLE_SSO
          value: "true"
        - name: SSO_URL
          value: {{ .Values.discourseSettings.ssoUrl }}
        - name: SSO_SECRET
          valueFrom:
            secretKeyRef:
              name: dash-sso-secret
              key: discourseSSOsecret
        - name: SSO_OVERIDES_EMAIL
          value: "true"
        - name: LOGOUT_REDIRECT
          value: {{ .Values.discourseSettings.ssoLogoutRedirect }}
        - name: DISCOURSE_SMTP_ADDRESS
          value: {{ .Values.discourseSettings.smtp_endpoint }}
        - name: DISCOURSE_SMTP_PORT
          value: "{{ .Values.app.network.discourseMailPort }}"
        - name: DISCOURSE_SMTP_ENABLE_START_TLS
          value: "true"
        - name: DISCOURSE_SMTP_USER_NAME
          valueFrom:
            secretKeyRef:
              name: chat-smtp-secret
              key: sesUsername
        - name: DISCOURSE_SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: chat-smtp-secret
              key: sesPassword
        resources:
          requests:
            cpu: 1
            memory: 2Gi
          limits:
            cpu: 1
            memory: 2Gi
        imagePullPolicy: Always
        volumeMounts:
        - name: resources
          mountPath: /shared
      volumes:
      - name: resources
        hostPath:
          # directory location on host
          path: {{ .Values.discourseSettings.fsDir }}
          # this field is optional
          type: Directory
